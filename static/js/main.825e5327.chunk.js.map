{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","fileteredRobot","filter","robot","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCFSC,G,MAXF,SAACC,GACb,OACC,yBAAKC,UAAU,gDACd,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,aAC1D,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCeCC,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEKA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCATO,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,yBAAKb,UAAU,OACd,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCACI,EARA,SAAClB,GACf,OACE,yBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAO,oBAAqBC,OAAO,SACnEtB,EAAMuB,WCiBIC,E,kDAnBd,WAAYxB,GAAQ,IAAD,8BAClB,cAAMA,IACDyB,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,+CAEDG,KAAK7B,MAAMuB,a,GAhBQQ,aCmDbC,E,kDA3Cd,aAAe,IAAD,8BACb,gBAmBDC,eAAiB,SAAAC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAa,IAJD,E,gEAQO,IAAD,OACnBG,QAAQC,IAAI,uBACZC,MAAM,6CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKd,SAAS,CAACtB,OAAQoC,OACvCN,QAAQC,IAAI,sB,+BAYH,IAAD,OACFM,EAAiBhB,KAAKJ,MAAMjB,OAAOsC,QAAO,SAAAC,GAC/C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKxB,MAAMU,YAAYa,kBAEjE,OACC,yBAAK/C,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWa,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQqC,W,GApCNd,aCFlBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLW,QAAQX,MAAMA,EAAMkC,a","file":"static/js/main.825e5327.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Card.css'\n\n\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className=\"bgLightPink dib br3 pa3 ma2 grow shadow-5 tc\">\n\t\t\t<img src={`https://robohash.org/${props.id}?200x200`} alt='Jane Doe'/>\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>)\n} \n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n// key is for the purpose of performance of DOM, when deleting one of them,\n// the react needs to know which to delete, and the key is like the ID of the item.\n// without the key, it'll have to re-render the entire list.\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t    \t{\n\t\t    \trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t);\t\n\t    \t\t})\n\t    \t}\n\t    </div>\t\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\n\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t\t<div className='pa2'>\n\t\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflowY: 'scroll', border:'1px solid #FFCC78', height:'85vh'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true});\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooooooooooops.</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\n// import {robots} from './robots';\nimport SearchBox from '../Components/SearchBox';\nimport 'tachyons';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\n\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"sending the request\");\n\t\tfetch(\"http://jsonplaceholder.typicode.com/users\")\n\t\t.then(response => {return response.json();})\n\t\t.then(users => {this.setState({robots: users});})\n\t\tconsole.log(\"sent the request\");\n\t}\n\n\t// use arrow function(non-predefined functions) to prevent the mis-use of 'this'\n\t// this can be different object depending on the different calling senarios.\n\t// arrow function, however, does not have its own 'this' binding,\n\t// so it guarantees that 'this' is from the class(or lexical context)\n\tonSearchChange = event => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t\t// console.log(this.state.robots[0].name.toLowerCase());\n\t}\n\n\trender() {\n\t\tconst fileteredRobot = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={fileteredRobot} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}